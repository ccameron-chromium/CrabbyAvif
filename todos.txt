smaller tasks:
* imagetiming
[done] * c-api IO
* yuv -> rgb
* limited to full
* one shot decode functions

===

tensorflow io libavif usage is wrong: missing setio call.
https://github.com/tensorflow/io/blob/master/tensorflow_io/core/kernels/image_avif_kernels.cc

===

fox 422 files have wrong subsampling in the av1C box.

avifdec shows different yuv sampleing with --info and actual decoding.

===

Chimera file in Netflix/avis is missing pitm box. It fails in libavif when trying to decode with source as pitm.

===

libavif: Add source option to avifdec?


===

replace all safe unwrap() calls with unwrap_unchecked().


===

// TODO: re-using err here results in some weird borrow checker error:
// https://old.reddit.com/r/rust/comments/qi3ye9/why_does_returning_a_value_mess_with_borrows/


===

properly define rust api returns. &ImageInfo and &Image are very confusing with some fields being accessed from the decoder.

===

building for android:

$ rustup target add ${target}
$ cargo build --no-default-features --target=${target}

arm64: aarch64-linux-android

$ cp cargo-config.toml ~/.cargo/config
$ rustup target add aarch64-linux-android
$ cargo build --no-default-features --target=aarch64-linux-android

===

$ cargo-config.toml

[target.aarch64-linux-android]
ar = "<project path>/greetings/NDK/arm64/bin/aarch64-linux-android-ar"
linker = "<project path>/greetings/NDK/arm64/bin/aarch64-linux-android-clang"

[target.armv7-linux-androideabi]
ar = "<project path>/greetings/NDK/arm/bin/arm-linux-androideabi-ar"
linker = "<project path>/greetings/NDK/arm/bin/arm-linux-androideabi-clang"

[target.i686-linux-android]
ar = "<project path>/greetings/NDK/x86/bin/i686-linux-android-ar"
linker = "<project path>/greetings/NDK/x86/bin/i686-linux-android-clang"

some documentation: https://doc.rust-lang.org/cargo/reference/config.html#target
