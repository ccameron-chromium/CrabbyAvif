#![allow(warnings)]
/* generated with bindgen --no-layout-tests decoder.h -o gav1.rs
(also need to update all header files to remove the gav1/ prefix from the #includes)
*/
/* automatically generated by rust-bindgen 0.68.1 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const LIBGAV1_MAJOR_VERSION: u32 = 0;
pub const LIBGAV1_MINOR_VERSION: u32 = 18;
pub const LIBGAV1_PATCH_VERSION: u32 = 0;
pub const LIBGAV1_VERSION: u32 = 4608;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionUnknown:
    Libgav1ChromaSamplePosition = 0;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionVertical:
    Libgav1ChromaSamplePosition = 1;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionColocated:
    Libgav1ChromaSamplePosition = 2;
pub const Libgav1ChromaSamplePosition_kLibgav1ChromaSamplePositionReserved:
    Libgav1ChromaSamplePosition = 3;
pub type Libgav1ChromaSamplePosition = ::std::os::raw::c_uint;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv420: Libgav1ImageFormat = 0;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv422: Libgav1ImageFormat = 1;
pub const Libgav1ImageFormat_kLibgav1ImageFormatYuv444: Libgav1ImageFormat = 2;
pub const Libgav1ImageFormat_kLibgav1ImageFormatMonochrome400: Libgav1ImageFormat = 3;
pub type Libgav1ImageFormat = ::std::os::raw::c_uint;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt709: Libgav1ColorPrimary = 1;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryUnspecified: Libgav1ColorPrimary = 2;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt470M: Libgav1ColorPrimary = 4;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt470Bg: Libgav1ColorPrimary = 5;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt601: Libgav1ColorPrimary = 6;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte240: Libgav1ColorPrimary = 7;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryGenericFilm: Libgav1ColorPrimary = 8;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryBt2020: Libgav1ColorPrimary = 9;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryXyz: Libgav1ColorPrimary = 10;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte431: Libgav1ColorPrimary = 11;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimarySmpte432: Libgav1ColorPrimary = 12;
pub const Libgav1ColorPrimary_kLibgav1ColorPrimaryEbu3213: Libgav1ColorPrimary = 22;
pub const Libgav1ColorPrimary_kLibgav1MaxColorPrimaries: Libgav1ColorPrimary = 255;
pub type Libgav1ColorPrimary = ::std::os::raw::c_uint;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt709:
    Libgav1TransferCharacteristics = 1;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsUnspecified:
    Libgav1TransferCharacteristics = 2;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt470M:
    Libgav1TransferCharacteristics = 4;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt470Bg:
    Libgav1TransferCharacteristics = 5;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt601:
    Libgav1TransferCharacteristics = 6;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte240:
    Libgav1TransferCharacteristics = 7;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLinear:
    Libgav1TransferCharacteristics = 8;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLog100:
    Libgav1TransferCharacteristics = 9;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsLog100Sqrt10:
    Libgav1TransferCharacteristics = 10;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsIec61966:
    Libgav1TransferCharacteristics = 11;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt1361:
    Libgav1TransferCharacteristics = 12;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSrgb:
    Libgav1TransferCharacteristics = 13;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt2020TenBit:
    Libgav1TransferCharacteristics = 14;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsBt2020TwelveBit:
    Libgav1TransferCharacteristics = 15;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte2084:
    Libgav1TransferCharacteristics = 16;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsSmpte428:
    Libgav1TransferCharacteristics = 17;
pub const Libgav1TransferCharacteristics_kLibgav1TransferCharacteristicsHlg:
    Libgav1TransferCharacteristics = 18;
pub const Libgav1TransferCharacteristics_kLibgav1MaxTransferCharacteristics:
    Libgav1TransferCharacteristics = 255;
pub type Libgav1TransferCharacteristics = ::std::os::raw::c_uint;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsIdentity: Libgav1MatrixCoefficients =
    0;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt709: Libgav1MatrixCoefficients = 1;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsUnspecified:
    Libgav1MatrixCoefficients = 2;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsFcc: Libgav1MatrixCoefficients = 4;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt470BG: Libgav1MatrixCoefficients =
    5;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt601: Libgav1MatrixCoefficients = 6;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpte240: Libgav1MatrixCoefficients =
    7;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpteYcgco:
    Libgav1MatrixCoefficients = 8;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt2020Ncl: Libgav1MatrixCoefficients =
    9;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsBt2020Cl: Libgav1MatrixCoefficients =
    10;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsSmpte2085: Libgav1MatrixCoefficients =
    11;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsChromatNcl:
    Libgav1MatrixCoefficients = 12;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsChromatCl: Libgav1MatrixCoefficients =
    13;
pub const Libgav1MatrixCoefficients_kLibgav1MatrixCoefficientsIctcp: Libgav1MatrixCoefficients = 14;
pub const Libgav1MatrixCoefficients_kLibgav1MaxMatrixCoefficients: Libgav1MatrixCoefficients = 255;
pub type Libgav1MatrixCoefficients = ::std::os::raw::c_uint;
pub const Libgav1ColorRange_kLibgav1ColorRangeStudio: Libgav1ColorRange = 0;
pub const Libgav1ColorRange_kLibgav1ColorRangeFull: Libgav1ColorRange = 1;
pub type Libgav1ColorRange = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataHdrCll {
    pub max_cll: u16,
    pub max_fall: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataHdrMdcv {
    pub primary_chromaticity_x: [u16; 3usize],
    pub primary_chromaticity_y: [u16; 3usize],
    pub white_point_chromaticity_x: u16,
    pub white_point_chromaticity_y: u16,
    pub luminance_max: u32,
    pub luminance_min: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1ObuMetadataItutT35 {
    pub country_code: u8,
    pub country_code_extension_byte: u8,
    pub payload_bytes: *mut u8,
    pub payload_size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1DecoderBuffer {
    pub chroma_sample_position: Libgav1ChromaSamplePosition,
    pub image_format: Libgav1ImageFormat,
    pub color_range: Libgav1ColorRange,
    pub color_primary: Libgav1ColorPrimary,
    pub transfer_characteristics: Libgav1TransferCharacteristics,
    pub matrix_coefficients: Libgav1MatrixCoefficients,
    pub bitdepth: ::std::os::raw::c_int,
    pub displayed_width: [::std::os::raw::c_int; 3usize],
    pub displayed_height: [::std::os::raw::c_int; 3usize],
    pub stride: [::std::os::raw::c_int; 3usize],
    pub plane: [*mut u8; 3usize],
    pub spatial_id: ::std::os::raw::c_int,
    pub temporal_id: ::std::os::raw::c_int,
    pub hdr_cll: Libgav1ObuMetadataHdrCll,
    pub has_hdr_cll: ::std::os::raw::c_int,
    pub hdr_mdcv: Libgav1ObuMetadataHdrMdcv,
    pub has_hdr_mdcv: ::std::os::raw::c_int,
    pub itut_t35: Libgav1ObuMetadataItutT35,
    pub has_itut_t35: ::std::os::raw::c_int,
    pub user_private_data: i64,
    pub buffer_private_data: *mut ::std::os::raw::c_void,
}
pub const Libgav1StatusCode_kLibgav1StatusOk: Libgav1StatusCode = 0;
pub const Libgav1StatusCode_kLibgav1StatusUnknownError: Libgav1StatusCode = -1;
pub const Libgav1StatusCode_kLibgav1StatusInvalidArgument: Libgav1StatusCode = -2;
pub const Libgav1StatusCode_kLibgav1StatusOutOfMemory: Libgav1StatusCode = -3;
pub const Libgav1StatusCode_kLibgav1StatusResourceExhausted: Libgav1StatusCode = -4;
pub const Libgav1StatusCode_kLibgav1StatusNotInitialized: Libgav1StatusCode = -5;
pub const Libgav1StatusCode_kLibgav1StatusAlready: Libgav1StatusCode = -6;
pub const Libgav1StatusCode_kLibgav1StatusUnimplemented: Libgav1StatusCode = -7;
pub const Libgav1StatusCode_kLibgav1StatusInternalError: Libgav1StatusCode = -8;
pub const Libgav1StatusCode_kLibgav1StatusBitstreamError: Libgav1StatusCode = -9;
pub const Libgav1StatusCode_kLibgav1StatusTryAgain: Libgav1StatusCode = -10;
pub const Libgav1StatusCode_kLibgav1StatusNothingToDequeue: Libgav1StatusCode = -11;
pub const Libgav1StatusCode_kLibgav1StatusReservedForFutureExpansionUseDefaultInSwitchInstead_:
    Libgav1StatusCode = -1000;
pub type Libgav1StatusCode = ::std::os::raw::c_int;
extern "C" {
    pub fn Libgav1GetErrorString(status: Libgav1StatusCode) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1FrameBuffer {
    pub plane: [*mut u8; 3usize],
    pub stride: [::std::os::raw::c_int; 3usize],
    pub private_data: *mut ::std::os::raw::c_void,
}
pub type Libgav1FrameBufferSizeChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
    ) -> Libgav1StatusCode,
>;
pub type Libgav1GetFrameBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
        frame_buffer: *mut Libgav1FrameBuffer,
    ) -> Libgav1StatusCode,
>;
pub type Libgav1ReleaseFrameBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1FrameBufferInfo {
    pub y_buffer_size: usize,
    pub uv_buffer_size: usize,
    pub y_stride: ::std::os::raw::c_int,
    pub uv_stride: ::std::os::raw::c_int,
    pub y_plane_offset: usize,
    pub uv_plane_offset: usize,
    pub stride_alignment: ::std::os::raw::c_int,
}
extern "C" {
    pub fn Libgav1ComputeFrameBufferInfo(
        bitdepth: ::std::os::raw::c_int,
        image_format: Libgav1ImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        left_border: ::std::os::raw::c_int,
        right_border: ::std::os::raw::c_int,
        top_border: ::std::os::raw::c_int,
        bottom_border: ::std::os::raw::c_int,
        stride_alignment: ::std::os::raw::c_int,
        info: *mut Libgav1FrameBufferInfo,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1SetFrameBuffer(
        info: *const Libgav1FrameBufferInfo,
        y_buffer: *mut u8,
        u_buffer: *mut u8,
        v_buffer: *mut u8,
        buffer_private_data: *mut ::std::os::raw::c_void,
        frame_buffer: *mut Libgav1FrameBuffer,
    ) -> Libgav1StatusCode;
}
pub type Libgav1ReleaseInputBufferCallback = ::std::option::Option<
    unsafe extern "C" fn(
        callback_private_data: *mut ::std::os::raw::c_void,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1DecoderSettings {
    pub threads: ::std::os::raw::c_int,
    pub frame_parallel: ::std::os::raw::c_int,
    pub blocking_dequeue: ::std::os::raw::c_int,
    pub on_frame_buffer_size_changed: Libgav1FrameBufferSizeChangedCallback,
    pub get_frame_buffer: Libgav1GetFrameBufferCallback,
    pub release_frame_buffer: Libgav1ReleaseFrameBufferCallback,
    pub release_input_buffer: Libgav1ReleaseInputBufferCallback,
    pub callback_private_data: *mut ::std::os::raw::c_void,
    pub output_all_layers: ::std::os::raw::c_int,
    pub operating_point: ::std::os::raw::c_int,
    pub post_filter_mask: u8,
}
extern "C" {
    pub fn Libgav1DecoderSettingsInitDefault(settings: *mut Libgav1DecoderSettings);
}
extern "C" {
    pub fn Libgav1GetVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Libgav1GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Libgav1GetBuildConfiguration() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Libgav1Decoder {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Libgav1DecoderCreate(
        settings: *const Libgav1DecoderSettings,
        decoder_out: *mut *mut Libgav1Decoder,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderDestroy(decoder: *mut Libgav1Decoder);
}
extern "C" {
    pub fn Libgav1DecoderEnqueueFrame(
        decoder: *mut Libgav1Decoder,
        data: *const u8,
        size: usize,
        user_private_data: i64,
        buffer_private_data: *mut ::std::os::raw::c_void,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderDequeueFrame(
        decoder: *mut Libgav1Decoder,
        out_ptr: *mut *const Libgav1DecoderBuffer,
    ) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderSignalEOS(decoder: *mut Libgav1Decoder) -> Libgav1StatusCode;
}
extern "C" {
    pub fn Libgav1DecoderGetMaxBitdepth() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
